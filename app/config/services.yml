# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    AppBundle\EventSubscriber\LocaleSubscriber:
            arguments: ['%kernel.default_locale%']
            # redundant if you're using autoconfigure
            tags: [kernel.event_subscriber]

    application_fos_user.security.interactive_login_listener:
            class: MSF\UserBundle\EventListener\UserListener
            tags:
                - { name: kernel.event_listener, event: security.interactive_login, method: setLocaleForAuthenticatedUser }

    application_fos_user.security.kernel_request_listener:
            class: MSF\UserBundle\EventListener\UserListener
            tags:
                - { name: kernel.event_listener, event: kernel.request, method: setLocaleForUnauthenticatedUser }
    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    admin.category:
            class: AppBundle\Admin\CategoryAdmin
            arguments: [~, AppBundle\Entity\Category, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Category }
            public: true
    admin.blog_post:
            class: AppBundle\Admin\BlogPostAdmin
            arguments: [~, AppBundle\Entity\BlogPost, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Blog post }
            public: true
    admin.client:
        class: AppBundle\Admin\ClientAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, label: "Gestion_Client" }
        arguments:
            - ~
            - MSF\UserBundle\Entity\Client
            - 'AppBundle:ClientCRUD' # define the new controller via the third argument
        public: true
    admin.support:
         class: AppBundle\Admin\SupportAdmin
         tags:
             - { name: sonata.admin, manager_type: orm, label: "Gestion_Support" }
         arguments:
             - ~
             - MSF\FactoryBundle\Entity\Support
             - 'AppBundle:SupportCRUD'
         public: true
    admin.parfum:
         class: AppBundle\Admin\ParfumAdmin
         tags:
             - { name: sonata.admin, manager_type: orm, label: "Gestion_Parfum" }
         arguments:
             - ~
             - AppBundle\Entity\Parfum
             - 'AppBundle:ParfumCRUD' # define the new controller via the third argument
         public: true
    admin.user:
            class: AppBundle\Admin\UserAdmin
            tags:
                - { name: sonata.admin, manager_type: orm, label: "Gestion_Utilisateurs" }
            arguments:
                - ~
                - MSF\UserBundle\Entity\User
                - 'AppBundle:UserCRUD' # define the new controller via the third argument
            public: true
    admin.produit:
            class: AppBundle\Admin\ProduitAdmin
            tags:
                - { name: sonata.admin, manager_type: orm, label: "Gestion_produit" }
            arguments:
                - ~
                - MSF\EcommerceBundle\Entity\Produit
                - 'AppBundle:ProduitCRUD' # define the new controller via the third argument
            public: true
    admin.categories:
            class: AppBundle\Admin\CategoriesAdmin
            tags:
                - { name: sonata.admin, manager_type: orm, label: "Creation de Categories de produit" }
            arguments:
                - ~
                - MSF\EcommerceBundle\Entity\Categories
                - 'AppBundle:CategoriesCRUD' # define the new controller via the third argument
            public: true
